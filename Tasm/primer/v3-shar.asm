;─────────── ШАР В ЯЩИКЕ ──────────────────────────────────────────────────────
; Шарик движется, отскакивая от стенок под углом 45 градусов
; Выход - нажатием любой клавиши

  .model tiny
  .code    
  org 100h
START:                  
  mov AX, 0003h                ;включение режима и очистка экрана
  int 10h    

  mov AX, 0B800h
  mov ES, AX                   ;адрес видеобуфера

  mov DX, offset Y             ;вывод игрового поля
  mov AH, 9
  int 21h

  mov BX, 10*160+38*2          ;нач.координата в поле: Y=10, X=38 (счет с 0)
  mov SI, 160                  ;шаг по Y: "160" -вниз   "-160" -вверх
  mov DI,   4                  ;шаг по X:   "4" -вправо   "-4" -влево
Begin:                  
  mov ES:[BX], byte ptr 'O'    ;--нарисовать символ пера

  mov AH, 11h                  ;нажата клавиша ? (если не нажато, то флаг ZF=1)
  int 16h    
  jnz  Stop                    ;если нажато что-нибудь, то выход из программы
  call Delay                   ;задержка

  mov ES:[BX], byte ptr '·'    ;--нарисовать символ следа ("стереть перо")

  mov AH, '#'                  ;символ границы

  push BX                      ;сохранили адрес
  add BX, SI                   ;новый адрес:  шаг dY
  add BX, DI                   ;              шаг dX
  cmp ES:[BX], AH              ;символ в новом месте - граница ? (он в AH)
  pop BX                       ;восстановили прежний адрес
  jnz Cont                     ;по новому адресу - не граница, на продолжение

  mov CH, 0                    ;флаг соседей:  00 -выступ   01 -сверху/снизу
                               ;               11 -угол     10 -справа/слева

                               ;--проверка снизу
  push BX                      ;сохранить адрес
  add BX, SI                   ;шаг вниз
  cmp ES:[BX], AH              ;сверху граница?
  pop BX                       ;восстановить адрес
  jnz Metka1                   ;если да
  or  CH, 00000001b            ;граница горизонт. ("1" в мл.бит флага соседей)

Metka1:                        ;--проверка сверху
  push BX
  sub BX, SI                   ;шаг вверх
  cmp ES:[BX], AH              ;сверху граница?
  pop BX
  jnz Metka2                   ;если да
  or  CH, 00000001b            ;граница горизонт. ("1" в мл.бит флага соседей)

Metka2:                        ;--проверка справа
  push BX
  add BX, DI                   ;шаг вправо
  cmp ES:[BX], AH              ;справа граница?
  pop BX
  jnz Metka3                   ;если да
  or  CH, 00000010b            ;граница вертик. ("1" в 2-ом бите флага соседей)

Metka3:                        ;--проверка слева
  push BX
  sub BX, DI                   ;шаг влево
  cmp ES:[BX], AH              ;слева граница?
  pop BX
  jnz Metka4                   ;если да
  or  CH, 00000010b            ;граница вертик. ("1" в 2-ом бите флага соседей)

Metka4:                        ;--инверсия направлений
  neg SI                       ;предполагаем, что флаг соседей "00" или "11"
  neg DI                       ;                            (выступ или угол)

  cmp CH, 00000000b            ;если выступ ("00")
  jz  Cont                     ;направления инвертированные, на продолжение

  cmp CH, 00000011b            ;если угол   ("11")
  jz  Cont                     ;направления инвертированные, на продолжение

  cmp CH, 00000001b            ;если граница горизонтальная ("01")
  jnz Metka5                   
  neg DI                       ;для отскока от горизонтали шаг dX не меняется
                               ;(а он инвертирован, инвертируем dX обратно)
Metka5:                 
  cmp CH, 00000010b            ;если граница вертикальная ("10")
  jnz Cont
  neg SI                       ;для отскока от вертикали шаг dY не меняется
                               ;(а он инвертирован, инвертируем dY обратно)

Cont:                          ;--движение
  add BX, SI                   ;пересчет адреса (адрес = адрес + dY + dX )
  add BX, DI
  jmp Begin

Stop:                   
  mov AH, 1                    ;пауза
  int 21h          
  mov AH, 4Ch                  ;стоп
  int 21h

         ;== Подпрограмма задержки (величину задержки подобрать опытным путем)
Delay:                  
          push CX
        mov  CX, 5000          ;внешний счетчик (подобрать!) 
Delay1: push CX                ;внешний счетчик в стек
          mov  CX, 0FFFFh      ;внутренний счетчик -максимальный (65535 раз)
Delay2:   dec  CX
          jnz  Delay2          ;внутренний цикл (задержка)
        pop  CX                ;восстановить внешний счетчик
        dec  CX
        jnz  Delay1            ;внешний цикл
          pop  CX
        ret      

    ;== рисунок игрового поля
    ;   вертик.стенки по 2 символа, чтобы при шаге 2 начальное могло быть любым

Y  db "################################################              ", 13, 10
   db "##                                            ##              ", 13, 10
   db "##                                            ##              ", 13, 10
   db "##                                            ##              ", 13, 10
   db "######                                        ##              ", 13, 10
   db "    ##                                        ##              ", 13, 10
   db "    ##                                        ################", 13, 10
   db "    ##                                                      ##", 13, 10
   db "    ##                                                      ##", 13, 10
   db "    ##                                                      ##", 13, 10
   db "    ##                                                      ##", 13, 10
   db "    ##                                                      ##", 13, 10
   db "    ##                  ################                    ##", 13, 10
   db "    ##                  ##            ##                    ##", 13, 10
   db "    ##                  ##            ##                    ##", 13, 10
   db "    ##                  ##            ##                    ##", 13, 10
   db "    ######################            ########################", '$'

end START
