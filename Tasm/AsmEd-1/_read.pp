;───────── подпрограммы для ВВОДА Текста и Десятичных чисел ───────────────────
;
;call ReadAX     ; ввод   10-го ЧИСЛА в AX
;                ;   (вводятся только символы '0'..'9' с эхо-печатью)
;
;────────────────
;call ReadS      ; ВВОД ТЕКСТА в переменную с адресом из BX 
;                ;   конец ввода -нажатием Enter (к переменной добавляется '$')
;                ;                или   до имеющегося в переменной символа '$'
;                ;   кол-во введенных символов (без конечного '$') будет в CX
; например:
;       Y db 5 dup (0),'$' ;переменная "Y" (5 символов и завершающий '$')
;
;      mov BX, offset Y    ;адрес переменной "Y" в регистр BX    или:  lea BX,Y
;      call ReadS          ;ввод текста в "Y" (до Enter,но не более 5 символов)
;                          ;в регистре CX будет кол-во введенных символов
;      text Y              ;печать введенного текста из переменной "Y"
;
;──────────────────────────────────────────────────────────────────────────────


;----ввод текста в массив с адресом из BX (дает в CX кол-во введенных символов)
; например описан массив:
;   Y db 5 dup (0),'$'  ;переменная "Y" (5 символов и завершающий символ '$')
; вызов:
;   mov BX, offset Y    ;адрес переменной "Y" в регистр BX    или:  lea BX,Y
;   call ReadS          ;ввод текста в "Y" (до Enter, но не более 5 символов)
;                       ;в регистре CX будет кол-во введенных символов
;   text Y              ;печать введенного текста из переменной "Y"
 
ReadS:
  push AX
  push BX
    mov CX, 0           ;кол-во введенных символов
ReadS_1:
    mov AL,[BX]         ;символ из переменной
    cmp AL, '$'         ;в переменной уже есть символ '$' (конец ввода) ?
    jnc ReadS_2         ;если переменная закончилась
  mov AH,10h
  int 16h               ;ввод символа с клавиатуры
    cmp AL,13
    jz ReadS_2          ;если нажато Enter, то завершение
  mov [BX],AL           ;нажатый символ в переменную
  mov AH,0Eh                  
  int 10h               ;печать нажатого символа из AL
    inc BX              ;к следующей ячейке переменной
    inc CX              ;кол-во введенных символов
  jmp ReadS_1
ReadS_2:
    mov AL,'$'          ;завершение ввода (символ '$' в конец текста)
    mov [BX],AL
  pop BX
  pop AX
  ret



;--------ввод 10-го числа в AX  (не более 65535) только цифры

 Read_ db '$',5 dup (0)        ;буфер для числа (ограничен символом '$')
 Read_M dw 10,100,1000,10000   ;множители (для 2..5 разрядов справа налево)

ReadAX:
  push BX
  push CX
  push DX
  push SI
  push DI
                ;---ввод символов (цифр числа) в буфер
  mov SI, 1               ;указаталь в начало буфера (изменяется: от 1 по 5)
ReadAX_2:
  mov AH,10h
  int 16h                 ;ввод символа с клавиатуры в AL
    cmp AL,13
    jz ReadAX_3           ;если нажато Enter, то конец ввода, на обработку
      cmp AL,'0'
      jc ReadAX_2
      cmp AL,'9'+1
      jnc ReadAX_2        ;если нажата не цифра, то на повтор ввода
  mov AH,0Eh
  int 10h                 ;печать введенного символа из AL
    mov Read_[SI],AL      ;запись символа в буфер
    inc SI                ;счетчик позиций в буфере вправо (1..5)
      cmp SI,6            ;буфер кончился (введено 5 символов)?
      jnz ReadAX_2        ;если буфер не кончился, ввод следующего символа
                ;---обработка введенного числа: справа налево, до '$'
ReadAX_3:
  mov DI,offset Read_M    ;адрес множителей
  dec SI                  ;счетчик позиций влево (на последнюю, младшую цифру)
  mov CH,0                ;старший байт накопителя =0
  mov CL,Read_[SI]        ;младший байт накопителя =младшая цифра (символ)
  sub CL,30h              ;цифра меньше номера символа на 30h
ReadAX_4:
  dec SI                  ;указатель позиции сдвинуть влево
  mov AL,Read_[SI]        ;символ из буфера с позиции SI
    cmp AL,'$'            ;если конец числа (левее начала буфера), то выход
    jz ReadAX_5
  sub AL,30h              ;цифра меньше номера символа на 30h
  mov BX,[DI]             ;множитель для цифры  (10,100,1000,10000)
  add DI,2                ;к следующему множителю
  mov AH,0                ;старший байт сомножителя -ноль
  mul BX                  ;умножение цифры на множитель:  AX = AL * BX
  add CX,AX               ;накопление результата в CX
  jmp ReadAX_4
                ;---число кончилось
ReadAX_5:
  push CX
  pop AX                  ;из накопителя в AX
    pop DI
    pop SI
    pop DX
    pop CX
    pop BX
  ret
